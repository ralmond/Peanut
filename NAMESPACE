import(methods)
importFrom(CPTtools,effectiveThetas)
importFrom(CPTtools,getOffsetRules)
importFrom(CPTtools,isOffsetRule)
importFrom(CPTtools,calcDPCFrame,barchart.CPF)
importFrom("utils", "limitedLabels", "recover")
import(shiny)
importFrom(shinyjs, useShinyjs, toggleState)
import(futile.logger)

## Pnet and Pnode interfaces
export(is.Pnet, as.Pnet, Pnet,
       PnetPriorWeight, "PnetPriorWeight<-",
       PnetPnodes, "PnetPnodes<-",
       BuildAllTables,
       is.Pnode, as.Pnode, Pnode, PnodeNet,
       PnodeQ, "PnodeQ<-",
       PnodePriorWeight, "PnodePriorWeight<-",
       PnodeRules, "PnodeRules<-",
       PnodeLink, "PnodeLink<-",
       PnodeLnAlphas, "PnodeLnAlphas<-",
       PnodeAlphas, "PnodeAlphas<-",
       defaultAlphas, defaultBetas,
       PnodeBetas, "PnodeBetas<-",
       PnodeLinkScale, "PnodeLinkScale<-",
       BuildTable,GetPriorWeight,PnodeParentTvals
  )
exportMethods(is.Pnet, as.Pnet, Pnet,
       PnetPriorWeight, "PnetPriorWeight<-",
       PnetPnodes, "PnetPnodes<-",
       BuildAllTables,
       is.Pnode, as.Pnode, Pnode, PnodeNet,
       PnodeQ, "PnodeQ<-",
       PnodePriorWeight, "PnodePriorWeight<-",
       PnodeRules, "PnodeRules<-",
       PnodeLink, "PnodeLink<-",
       PnodeLnAlphas, "PnodeLnAlphas<-",
       PnodeAlphas, "PnodeAlphas<-",
       PnodeBetas, "PnodeBetas<-",
       PnodeLinkScale, "PnodeLinkScale<-",
       BuildTable,PnodeParentTvals
  )

S3method(is.Pnet, default)
#S3method(Pnet, default)
S3method(is.Pnode, default)
S3method(PnodeAlphas, default)
S3method("PnodeAlphas<-", default)
S3method(PnodeParentTvals, default)


## BN generics.
export(PnodeName, "PnodeName<-",
       PnodeTitle, "PnodeTitle<-",
       PnodeDescription, "PnodeDescription<-",
       PnodeLabels, "PnodeLabels<-",
       PnodeStates, "PnodeStates<-", PnodeNumStates,
       PnodeStateTitles, "PnodeStateTitles<-",
       PnodeStateDescriptions, "PnodeStateDescriptions<-",
       PnodeStateValues, "PnodeStateValues<-",
       PnodeStateBounds, "PnodeStateBounds<-",
       PnodeParents, "PnodeParents<-", PnodeParentNames, PnodeNumParents,
       isPnodeContinuous,
       PnetName, "PnetName<-",
       PnetTitle, "PnetTitle<-",
       PnetHub, "PnetHub<-",
       PnetPathname, "PnetPathname<-",
       PnetDescription, "PnetDescription<-",
       PnetFindNode,
       PnetMakeStubNodes, PnetRemoveStubNodes,PnetAdjoin,
       PnetDetach,
       PnetSerialize, PnetUnserialize, unserializePnet
       )
exportMethods(PnodeName, "PnodeName<-",
       PnodeTitle, "PnodeTitle<-",
       PnodeDescription, "PnodeDescription<-",
       PnodeLabels, "PnodeLabels<-",
       PnodeStates, "PnodeStates<-", PnodeNumStates,
       PnodeStateTitles, "PnodeStateTitles<-",
       PnodeStateDescriptions, "PnodeStateDescriptions<-",
       PnodeStateValues, "PnodeStateValues<-",
       PnodeStateBounds, "PnodeStateBounds<-",
       PnodeParents, "PnodeParents<-", PnodeParentNames, PnodeNumParents,
       isPnodeContinuous,
       PnetName, "PnetName<-",
       PnetTitle, "PnetTitle<-",
       PnetHub, "PnetHub<-",
       PnetPathname, "PnetPathname<-",
       PnetDescription, "PnetDescription<-",
       PnetMakeStubNodes, PnetRemoveStubNodes,
       PnetAdjoin, PnetDetach,
       PnetFindNode)

## Manifests

export(BuildNetManifest,BuildNodeManifest)

## Warehouses
export(ClearWarehouse,WarehouseManifest,"WarehouseManifest<-",
       WarehouseData,WarehouseSupply,WarehouseFetch,
       WarehouseMake,WarehouseFree, WarehouseUnpack,
       WarehouseInventory,
       is.PnodeWarehouse,is.PnetWarehouse)
exportMethods(ClearWarehouse,
              WarehouseManifest,"WarehouseManifest<-",
       WarehouseData,WarehouseFetch,WarehouseSupply,
       WarehouseMake,WarehouseFree,
       WarehouseInventory,
       is.PnodeWarehouse,is.PnetWarehouse)



## EM algorithm
export(GEMfit, calcPnetLLike, calcExpTables,
       maxAllTableParams,maxCPTParam)
exportMethods(calcPnetLLike, calcExpTables,
       maxAllTableParams,maxCPTParam)
#S3method("maxAllTableParams", default)


## Q and Omega matrixes
export(Pnet2Omega,Pnet2Qmat,topsort,Omega2Pnet,Qmat2Pnet)

## Gadgets
export(CompensatoryGadget,OffsetGadget,RegressionGadget,DPCGadget)

## Statistics
exportClass(Statistic)
export(name, Statistic, calcStat, PnodeMargin, PnodeEAP, PnodeSD, PnodeMedian,
       PnodeMode)
exportMethods(calcStat, name)

export(flog.try)
